  public List<List<Integer>> combinationSum(int[] candidates, int target) {
    List<List<Integer>> ans = new ArrayList<>();
    if (candidates.length == 0) return ans;
    backtracking(ans, new ArrayList<>(), 0, 0, candidates, target);
    return ans;
  }

  /**
   * combination: i = start
   *
   * @see moe.leer.leetcode.p078.Solution#subsets(int[])
   * @see moe.leer.leetcode.p017.Solution#letterCombinations2(String)
   * <p>
   * permutation: i = 0
   * @see moe.leer.leetcode.p046.Solution#permute(int[])
   */
  private void backtracking(List<List<Integer>> ans, List<Integer> combination, int currSum, int start, int[] candidates, int target) {
    if (currSum == target) {
      ans.add(new ArrayList<>(combination));
      return;
    } else if (currSum > target) {
      return;
    }
    for (int i = start; i < candidates.length; i++) {
      int candidate = candidates[i];
      combination.add(candidate);
      currSum += candidate;
      // not i + 1, because we can reuse element
      backtracking(ans, combination, currSum, i, candidates, target);
      combination.remove(combination.size() - 1);
      currSum -= candidate;
    }
  }